{"ast":null,"code":"// Mock Supabase client for local testing\n// Use this when you don't have database access\n\nlet mockPings = [];\nconst mockSupabase = {\n  from: table => ({\n    select: columns => ({\n      eq: (column, value) => ({\n        order: (orderColumn, options) => ({\n          limit: limitCount => {\n            // Filter pings by group_code\n            const filteredPings = mockPings.filter(ping => ping.group_code === value);\n\n            // Sort by timestamp\n            const sortedPings = filteredPings.sort((a, b) => {\n              const dateA = new Date(a.timestamp);\n              const dateB = new Date(b.timestamp);\n              return options !== null && options !== void 0 && options.ascending ? dateA - dateB : dateB - dateA;\n            });\n\n            // Apply limit\n            const limitedPings = sortedPings.slice(0, limitCount);\n            console.log(`[MOCK] Loading ${limitedPings.length} pings for group: ${value}`);\n            return Promise.resolve({\n              data: limitedPings,\n              error: null\n            });\n          }\n        })\n      })\n    }),\n    insert: records => {\n      // Add mock data\n      const newPings = records.map(record => ({\n        ...record,\n        id: 'mock-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        created_at: new Date().toISOString()\n      }));\n      mockPings.push(...newPings);\n      console.log(`[MOCK] Inserted ${newPings.length} pings:`, newPings);\n      return Promise.resolve({\n        data: newPings,\n        error: null\n      });\n    }\n  })\n};\nexport { mockSupabase };","map":{"version":3,"names":["mockPings","mockSupabase","from","table","select","columns","eq","column","value","order","orderColumn","options","limit","limitCount","filteredPings","filter","ping","group_code","sortedPings","sort","a","b","dateA","Date","timestamp","dateB","ascending","limitedPings","slice","console","log","length","Promise","resolve","data","error","insert","records","newPings","map","record","id","now","Math","random","toString","substr","created_at","toISOString","push"],"sources":["/Users/jwono/Downloads/snowping-pwa/src/mockSupabase.js"],"sourcesContent":["// Mock Supabase client for local testing\n// Use this when you don't have database access\n\nlet mockPings = []\n\nconst mockSupabase = {\n  from: (table) => ({\n    select: (columns) => ({\n      eq: (column, value) => ({\n        order: (orderColumn, options) => ({\n          limit: (limitCount) => {\n            // Filter pings by group_code\n            const filteredPings = mockPings.filter(ping => ping.group_code === value)\n            \n            // Sort by timestamp\n            const sortedPings = filteredPings.sort((a, b) => {\n              const dateA = new Date(a.timestamp)\n              const dateB = new Date(b.timestamp)\n              return options?.ascending ? dateA - dateB : dateB - dateA\n            })\n            \n            // Apply limit\n            const limitedPings = sortedPings.slice(0, limitCount)\n            \n            console.log(`[MOCK] Loading ${limitedPings.length} pings for group: ${value}`)\n            \n            return Promise.resolve({\n              data: limitedPings,\n              error: null\n            })\n          }\n        })\n      })\n    }),\n    \n    insert: (records) => {\n      // Add mock data\n      const newPings = records.map(record => ({\n        ...record,\n        id: 'mock-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        created_at: new Date().toISOString()\n      }))\n      \n      mockPings.push(...newPings)\n      \n      console.log(`[MOCK] Inserted ${newPings.length} pings:`, newPings)\n      \n      return Promise.resolve({\n        data: newPings,\n        error: null\n      })\n    }\n  })\n}\n\nexport { mockSupabase }"],"mappings":"AAAA;AACA;;AAEA,IAAIA,SAAS,GAAG,EAAE;AAElB,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAGC,KAAK,KAAM;IAChBC,MAAM,EAAGC,OAAO,KAAM;MACpBC,EAAE,EAAEA,CAACC,MAAM,EAAEC,KAAK,MAAM;QACtBC,KAAK,EAAEA,CAACC,WAAW,EAAEC,OAAO,MAAM;UAChCC,KAAK,EAAGC,UAAU,IAAK;YACrB;YACA,MAAMC,aAAa,GAAGd,SAAS,CAACe,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,UAAU,KAAKT,KAAK,CAAC;;YAEzE;YACA,MAAMU,WAAW,GAAGJ,aAAa,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;cAC/C,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAACH,CAAC,CAACI,SAAS,CAAC;cACnC,MAAMC,KAAK,GAAG,IAAIF,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC;cACnC,OAAOb,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEe,SAAS,GAAGJ,KAAK,GAAGG,KAAK,GAAGA,KAAK,GAAGH,KAAK;YAC3D,CAAC,CAAC;;YAEF;YACA,MAAMK,YAAY,GAAGT,WAAW,CAACU,KAAK,CAAC,CAAC,EAAEf,UAAU,CAAC;YAErDgB,OAAO,CAACC,GAAG,CAAC,kBAAkBH,YAAY,CAACI,MAAM,qBAAqBvB,KAAK,EAAE,CAAC;YAE9E,OAAOwB,OAAO,CAACC,OAAO,CAAC;cACrBC,IAAI,EAAEP,YAAY;cAClBQ,KAAK,EAAE;YACT,CAAC,CAAC;UACJ;QACF,CAAC;MACH,CAAC;IACH,CAAC,CAAC;IAEFC,MAAM,EAAGC,OAAO,IAAK;MACnB;MACA,MAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAG,CAACC,MAAM,KAAK;QACtC,GAAGA,MAAM;QACTC,EAAE,EAAE,OAAO,GAAGlB,IAAI,CAACmB,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QACxEC,UAAU,EAAE,IAAIxB,IAAI,CAAC,CAAC,CAACyB,WAAW,CAAC;MACrC,CAAC,CAAC,CAAC;MAEHhD,SAAS,CAACiD,IAAI,CAAC,GAAGX,QAAQ,CAAC;MAE3BT,OAAO,CAACC,GAAG,CAAC,mBAAmBQ,QAAQ,CAACP,MAAM,SAAS,EAAEO,QAAQ,CAAC;MAElE,OAAON,OAAO,CAACC,OAAO,CAAC;QACrBC,IAAI,EAAEI,QAAQ;QACdH,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;EACF,CAAC;AACH,CAAC;AAED,SAASlC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}