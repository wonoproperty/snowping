{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import GroupCodeInput from'./components/GroupCodeInput';import PingControls from'./components/PingControls';import MapComponent from'./components/MapComponent';import{supabase}from'./supabaseClient';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[groupCode,setGroupCode]=useState(null);const[pings,setPings]=useState([]);const[isLoading,setIsLoading]=useState(false);// Load saved group code on app start\nuseEffect(()=>{const savedGroupCode=localStorage.getItem('snowping_group_code');if(savedGroupCode){setGroupCode(savedGroupCode);}},[]);// Load pings when group code changes\nuseEffect(()=>{if(groupCode){loadPings();syncOfflinePings();}},[groupCode]);const loadPings=useCallback(async()=>{if(!groupCode)return;setIsLoading(true);try{const{data,error}=await supabase.from('pings').select('*').eq('group_code',groupCode).order('timestamp',{ascending:false}).limit(50);if(error){console.error('Error loading pings:',error);return;}setPings(data||[]);}catch(error){console.error('Error loading pings:',error);}finally{setIsLoading(false);}},[groupCode]);const handleGroupSet=newGroupCode=>{setGroupCode(newGroupCode);localStorage.setItem('snowping_group_code',newGroupCode);};const handleLeaveGroup=()=>{setGroupCode(null);setPings([]);localStorage.removeItem('snowping_group_code');};const handlePing=async ping=>{try{const{error}=await supabase.from('pings').insert([ping]);if(error){console.error('Insert error:',error);saveOfflinePing(ping);alert('No connection. Ping saved locally and will sync when online.');return;}// Refresh pings after successful insert\nloadPings();alert('Ping sent successfully!');}catch(error){console.error('Ping error:',error);saveOfflinePing(ping);alert('No connection. Ping saved locally and will sync when online.');}};const saveOfflinePing=ping=>{const offlinePings=JSON.parse(localStorage.getItem('offlinePings')||'[]');offlinePings.push(ping);localStorage.setItem('offlinePings',JSON.stringify(offlinePings));};const syncOfflinePings=async()=>{const offlinePings=JSON.parse(localStorage.getItem('offlinePings')||'[]');if(offlinePings.length===0)return;try{const{error}=await supabase.from('pings').insert(offlinePings);if(!error){console.log('Offline pings synced successfully');localStorage.removeItem('offlinePings');loadPings();// Refresh to show synced pings\n}else{console.error('Offline sync error:',error);}}catch(error){console.log('Still offline or sync failed:',error);}};if(!groupCode){return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(GroupCodeInput,{onGroupSet:handleGroupSet})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"app-header\",children:/*#__PURE__*/_jsxs(\"h1\",{className:\"app-title\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"snow-icon\",children:\"\\u2744\\uFE0F\"}),\"SnowPing\"]})}),/*#__PURE__*/_jsxs(\"main\",{className:\"app-main\",children:[/*#__PURE__*/_jsx(PingControls,{groupCode:groupCode,onPing:handlePing,onLeaveGroup:handleLeaveGroup}),/*#__PURE__*/_jsxs(\"div\",{className:\"map-section\",children:[isLoading&&/*#__PURE__*/_jsxs(\"div\",{className:\"loading-overlay\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Loading pings...\"})]}),/*#__PURE__*/_jsx(MapComponent,{pings:pings})]})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","GroupCodeInput","PingControls","MapComponent","supabase","jsx","_jsx","jsxs","_jsxs","App","groupCode","setGroupCode","pings","setPings","isLoading","setIsLoading","savedGroupCode","localStorage","getItem","loadPings","syncOfflinePings","data","error","from","select","eq","order","ascending","limit","console","handleGroupSet","newGroupCode","setItem","handleLeaveGroup","removeItem","handlePing","ping","insert","saveOfflinePing","alert","offlinePings","JSON","parse","push","stringify","length","log","className","children","onGroupSet","onPing","onLeaveGroup"],"sources":["/Users/jwono/Downloads/snowping-pwa/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport GroupCodeInput from './components/GroupCodeInput'\nimport PingControls from './components/PingControls'\nimport MapComponent from './components/MapComponent'\nimport { supabase } from './supabaseClient'\nimport './App.css'\n\nfunction App() {\n  const [groupCode, setGroupCode] = useState(null)\n  const [pings, setPings] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  // Load saved group code on app start\n  useEffect(() => {\n    const savedGroupCode = localStorage.getItem('snowping_group_code')\n    if (savedGroupCode) {\n      setGroupCode(savedGroupCode)\n    }\n  }, [])\n\n  // Load pings when group code changes\n  useEffect(() => {\n    if (groupCode) {\n      loadPings()\n      syncOfflinePings()\n    }\n  }, [groupCode])\n\n  const loadPings = useCallback(async () => {\n    if (!groupCode) return\n    \n    setIsLoading(true)\n    try {\n      const { data, error } = await supabase\n        .from('pings')\n        .select('*')\n        .eq('group_code', groupCode)\n        .order('timestamp', { ascending: false })\n        .limit(50)\n\n      if (error) {\n        console.error('Error loading pings:', error)\n        return\n      }\n\n      setPings(data || [])\n    } catch (error) {\n      console.error('Error loading pings:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [groupCode])\n\n  const handleGroupSet = (newGroupCode) => {\n    setGroupCode(newGroupCode)\n    localStorage.setItem('snowping_group_code', newGroupCode)\n  }\n\n  const handleLeaveGroup = () => {\n    setGroupCode(null)\n    setPings([])\n    localStorage.removeItem('snowping_group_code')\n  }\n\n  const handlePing = async (ping) => {\n    try {\n      const { error } = await supabase.from('pings').insert([ping])\n\n      if (error) {\n        console.error('Insert error:', error)\n        saveOfflinePing(ping)\n        alert('No connection. Ping saved locally and will sync when online.')\n        return\n      }\n\n      // Refresh pings after successful insert\n      loadPings()\n      alert('Ping sent successfully!')\n    } catch (error) {\n      console.error('Ping error:', error)\n      saveOfflinePing(ping)\n      alert('No connection. Ping saved locally and will sync when online.')\n    }\n  }\n\n  const saveOfflinePing = (ping) => {\n    const offlinePings = JSON.parse(localStorage.getItem('offlinePings') || '[]')\n    offlinePings.push(ping)\n    localStorage.setItem('offlinePings', JSON.stringify(offlinePings))\n  }\n\n  const syncOfflinePings = async () => {\n    const offlinePings = JSON.parse(localStorage.getItem('offlinePings') || '[]')\n    if (offlinePings.length === 0) return\n\n    try {\n      const { error } = await supabase.from('pings').insert(offlinePings)\n      if (!error) {\n        console.log('Offline pings synced successfully')\n        localStorage.removeItem('offlinePings')\n        loadPings() // Refresh to show synced pings\n      } else {\n        console.error('Offline sync error:', error)\n      }\n    } catch (error) {\n      console.log('Still offline or sync failed:', error)\n    }\n  }\n\n  if (!groupCode) {\n    return (\n      <div className=\"App\">\n        <GroupCodeInput onGroupSet={handleGroupSet} />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">\n        <h1 className=\"app-title\">\n          <span className=\"snow-icon\">❄️</span>\n          SnowPing\n        </h1>\n      </header>\n      \n      <main className=\"app-main\">\n        <PingControls \n          groupCode={groupCode}\n          onPing={handlePing}\n          onLeaveGroup={handleLeaveGroup}\n        />\n        \n        <div className=\"map-section\">\n          {isLoading && (\n            <div className=\"loading-overlay\">\n              <div className=\"spinner\"></div>\n              <span>Loading pings...</span>\n            </div>\n          )}\n          <MapComponent pings={pings} />\n        </div>\n      </main>\n    </div>\n  )\n}\n\nexport default App"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}