{"ast":null,"code":"// Mock Supabase client for local testing\n// Use this when you don't have database access\nlet mockPings=[];const mockSupabase={from:table=>({select:columns=>({eq:(column,value)=>({order:(orderColumn,options)=>({limit:limitCount=>{// Filter pings by group_code\nconst filteredPings=mockPings.filter(ping=>ping.group_code===value);// Sort by timestamp\nconst sortedPings=filteredPings.sort((a,b)=>{const dateA=new Date(a.timestamp);const dateB=new Date(b.timestamp);return options!==null&&options!==void 0&&options.ascending?dateA-dateB:dateB-dateA;});// Apply limit\nconst limitedPings=sortedPings.slice(0,limitCount);console.log(`[MOCK] Loading ${limitedPings.length} pings for group: ${value}`);return Promise.resolve({data:limitedPings,error:null});}})})}),insert:records=>{// Add mock data\nconst newPings=records.map(record=>({...record,id:'mock-'+Date.now()+'-'+Math.random().toString(36).substr(2,9),created_at:new Date().toISOString()}));mockPings.push(...newPings);console.log(`[MOCK] Inserted ${newPings.length} pings:`,newPings);return Promise.resolve({data:newPings,error:null});}})};export{mockSupabase};","map":{"version":3,"names":["mockPings","mockSupabase","from","table","select","columns","eq","column","value","order","orderColumn","options","limit","limitCount","filteredPings","filter","ping","group_code","sortedPings","sort","a","b","dateA","Date","timestamp","dateB","ascending","limitedPings","slice","console","log","length","Promise","resolve","data","error","insert","records","newPings","map","record","id","now","Math","random","toString","substr","created_at","toISOString","push"],"sources":["/Users/jwono/Downloads/snowping-pwa/src/mockSupabase.js"],"sourcesContent":["// Mock Supabase client for local testing\n// Use this when you don't have database access\n\nlet mockPings = []\n\nconst mockSupabase = {\n  from: (table) => ({\n    select: (columns) => ({\n      eq: (column, value) => ({\n        order: (orderColumn, options) => ({\n          limit: (limitCount) => {\n            // Filter pings by group_code\n            const filteredPings = mockPings.filter(ping => ping.group_code === value)\n            \n            // Sort by timestamp\n            const sortedPings = filteredPings.sort((a, b) => {\n              const dateA = new Date(a.timestamp)\n              const dateB = new Date(b.timestamp)\n              return options?.ascending ? dateA - dateB : dateB - dateA\n            })\n            \n            // Apply limit\n            const limitedPings = sortedPings.slice(0, limitCount)\n            \n            console.log(`[MOCK] Loading ${limitedPings.length} pings for group: ${value}`)\n            \n            return Promise.resolve({\n              data: limitedPings,\n              error: null\n            })\n          }\n        })\n      })\n    }),\n    \n    insert: (records) => {\n      // Add mock data\n      const newPings = records.map(record => ({\n        ...record,\n        id: 'mock-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9),\n        created_at: new Date().toISOString()\n      }))\n      \n      mockPings.push(...newPings)\n      \n      console.log(`[MOCK] Inserted ${newPings.length} pings:`, newPings)\n      \n      return Promise.resolve({\n        data: newPings,\n        error: null\n      })\n    }\n  })\n}\n\nexport { mockSupabase }"],"mappings":"AAAA;AACA;AAEA,GAAI,CAAAA,SAAS,CAAG,EAAE,CAElB,KAAM,CAAAC,YAAY,CAAG,CACnBC,IAAI,CAAGC,KAAK,GAAM,CAChBC,MAAM,CAAGC,OAAO,GAAM,CACpBC,EAAE,CAAEA,CAACC,MAAM,CAAEC,KAAK,IAAM,CACtBC,KAAK,CAAEA,CAACC,WAAW,CAAEC,OAAO,IAAM,CAChCC,KAAK,CAAGC,UAAU,EAAK,CACrB;AACA,KAAM,CAAAC,aAAa,CAAGd,SAAS,CAACe,MAAM,CAACC,IAAI,EAAIA,IAAI,CAACC,UAAU,GAAKT,KAAK,CAAC,CAEzE;AACA,KAAM,CAAAU,WAAW,CAAGJ,aAAa,CAACK,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,CAC/C,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAC,IAAI,CAACH,CAAC,CAACI,SAAS,CAAC,CACnC,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAF,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CACnC,MAAO,CAAAb,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEe,SAAS,CAAGJ,KAAK,CAAGG,KAAK,CAAGA,KAAK,CAAGH,KAAK,CAC3D,CAAC,CAAC,CAEF;AACA,KAAM,CAAAK,YAAY,CAAGT,WAAW,CAACU,KAAK,CAAC,CAAC,CAAEf,UAAU,CAAC,CAErDgB,OAAO,CAACC,GAAG,CAAC,kBAAkBH,YAAY,CAACI,MAAM,qBAAqBvB,KAAK,EAAE,CAAC,CAE9E,MAAO,CAAAwB,OAAO,CAACC,OAAO,CAAC,CACrBC,IAAI,CAAEP,YAAY,CAClBQ,KAAK,CAAE,IACT,CAAC,CAAC,CACJ,CACF,CAAC,CACH,CAAC,CACH,CAAC,CAAC,CAEFC,MAAM,CAAGC,OAAO,EAAK,CACnB;AACA,KAAM,CAAAC,QAAQ,CAAGD,OAAO,CAACE,GAAG,CAACC,MAAM,GAAK,CACtC,GAAGA,MAAM,CACTC,EAAE,CAAE,OAAO,CAAGlB,IAAI,CAACmB,GAAG,CAAC,CAAC,CAAG,GAAG,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAE,CAAC,CAAC,CACxEC,UAAU,CAAE,GAAI,CAAAxB,IAAI,CAAC,CAAC,CAACyB,WAAW,CAAC,CACrC,CAAC,CAAC,CAAC,CAEHhD,SAAS,CAACiD,IAAI,CAAC,GAAGX,QAAQ,CAAC,CAE3BT,OAAO,CAACC,GAAG,CAAC,mBAAmBQ,QAAQ,CAACP,MAAM,SAAS,CAAEO,QAAQ,CAAC,CAElE,MAAO,CAAAN,OAAO,CAACC,OAAO,CAAC,CACrBC,IAAI,CAAEI,QAAQ,CACdH,KAAK,CAAE,IACT,CAAC,CAAC,CACJ,CACF,CAAC,CACH,CAAC,CAED,OAASlC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}